@model TimelineEvent
@{
    ViewData["Title"] = "Event Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section AddToHead{
    <link href="~/css/eventDetailed.css" rel="stylesheet" />
}

<div id="superAwesomeTester" style="display: none;">Banana</div>
<div class="container">
    <div class="col-sm-12">
        <div id="eventHeader">
            <div id="backArrow" class="text-center">
                @*<a class="arrowLink" @*onclick="goBack()" * @ asp-action="Index" asp-route-timelineId="@ViewBag.TimelineId"><i class="fas fa-arrow-left"></i></a>*@
                <a class="arrowLink" href="@Url.Action("index", new { timelineId=ViewBag.TimelineId })#eventLink-@Model.Id"><i class="fas fa-arrow-left"></i></a>
            </div>
            <div class="headerSection">
                <h2 class="mainHeader">@Model.Title </h2>
                <hr class="headerHR" />
                <h4><em>@Model.EventDateTime.ToString("dd MMMM yyyy")</em></h4>
            </div>
        </div>
    </div>
</div>




<!-- Tab Section Start -->
<div class="bgColor">
    <div>
        <div class="tabLinksContainer">
            <div class="tab">
                <button class="tablinks uppercase active" onclick="openTab(event, 'overview')">Overview</button>
                <button class="tablinks uppercase" onclick="openTab(event, 'attachments')">Attachments</button>
                <button class="tablinks uppercase" onclick="openTab(event, 'gallery')">Gallery</button>
                <button class="tablinks uppercase" onclick="openTab(event, 'locationtab')">Location</button>

            </div>
        </div>
    </div>





    <!-- Tabs/Headings -->
    <!-- Overview TAB -->
    <div id="overview" class="tabcontent" style="display: block;">
        <div id="descriptionContent">
            @Html.Partial("Description", Model)
        </div>
    </div>

    <!-- Attachments TAB -->
    <div id="attachments" class="tabcontent">




        @if (Model.AttachmentFilesCount > 0)
        {
            <table class="table" id="attachment-files-table">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Title)
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Attachments)
                    {
                        @if (!item.IsImage)
                        {
                            <tr class="attachment-file-item" id="attachment-item-@item.Id">
                                <td>
                                    <a asp-controller="Attachments" asp-action="Download" asp-route-attachmentId="@item.Id">@item.Title</a>
                                </td>
                                <td>
                                    <a href="#" data-id="@item.Id" class="deleteAttachmentLink">Delete</a>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }
        else
        {
            <br />
            <div class="panel panel-default">
                <div class="panel-body text-center" style="font-size: 10pt; padding: 14px;">
                    <p>No <strong>Files</strong> Uploaded Yet</p>
                </div>
            </div>
        }
        <br />


        <form method="post" enctype="multipart/form-data" asp-controller="Attachments" asp-action="Upload" asp-route-eventId="@ViewBag.EventId">
            <div class="form-group formDragAndDrop">
                <input id="fileUpload" type="file" name="files" multiple class="form-control dragAndDrop" />
            </div>

            <input type="submit" value="Upload" class="btn btn-default" id="add-file-attachment-submit" />
        </form>


    </div>


    <!-- Gallery TAB -->
    <div id="gallery" class="tabcontent">


        @if (Model.AttachmentImagesCount > 0)
        {
            int i = 1;

            <div class="slideshow-container">
                @foreach (var item in Model.Attachments)
                {
                    @if (item.IsImage)
                    {
                        <div class="mySlides">
                            <div class="numbertext">@i / @Model.AttachmentImagesCount</div>
                            <img src="@Url.AttachmentLink(item)" style="width:100%" object-fit contain>
                            <div class="text">@item.Title</div>
                        </div>
                        i++;
                    }
                }

                <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
                <a class="next" onclick="plusSlides(1)">&#10095;</a>

            </div>
            <br>
            <div style="text-align:center">
                @if (Model.AttachmentImagesCount > 0)
                {
                    int j = 1;
                    foreach (var item in Model.Attachments)
                    {

                        if (item.IsImage)
                        {
                            <span class="dot" onclick="currentSlide(@j)"></span>
                            j++;
                        }
                    }
                }
            </div>
        }
        else
        {
            <br />
            <div class="panel panel-default">
                <div class="panel-body text-center" style="font-size: 10pt; padding: 14px;">
                    <p>No <strong>Images</strong> Uploaded Yet</p>
                </div>
            </div>
        }

        <br>

        <form method="post" enctype="multipart/form-data" asp-controller="Attachments" asp-action="Upload" asp-route-eventId="@ViewBag.EventId" id="add-file-attachment-form">
            <div class="form-group formDragAndDrop">
                @*<p>Upload one or more attachments:</p>*@
                <input id="fileUpload" type="file" name="files" multiple class="form-control dragAndDrop" />
            </div>

            <input type="submit" value="Upload" class="btn btn-default" id="add-file-submit-button" />
        </form>
    </div>


    <!-- Location TAB -->
    <div id="locationtab" class="tabcontent">
        <p id="geoNonSupport" style="color:red"></p>

        <div class="row">
            <div class="form-group col-xs-3 col-xs-offset-2">
                <label for="curlng">Latitude</label>
                <input type="text" name="longitude" id="curlng" class="form-control" disabled />
            </div>
            <div class="form-group col-xs-3">
                <label for="curlat">Longitude</label>
                <input type="text" name="longitude" id="curlat" class="form-control" disabled />
            </div>
            <div class="form-group col-xs-2">

                <form asp-antiforgery="true" id="edit-location-form" style="padding-top: 25px;">
                    <div class="form-group col-xs-4">
                        <input type="hidden" id="locationaddress" asp-for="Location" class="form-control" />
                        <button type="submit" id="btnSave" class="btn btn-default">
                            <i class="far fa-edit" aria-hidden="true"></i>
                            Save
                        </button>
                    </div>
                </form>
            </div>
        </div>
        <div class="pac-card" id="pac-card">
            <div id="pac-container">
                <input id="pac-input" type="text" placeholder="Enter location">
            </div>
        </div>

        <div id="googleMap" style="height:400px; width: 100%;"></div>
        <div id="infowindow-content">
            <img src="" width="16" height="16" id="place-icon">
            <span id="place-name" class="title"></span><br>
            <span id="place-address"></span>
        </div>
        <div class="text-center">
            <br />
            <p>Drag map marker to record the location <div id="friendlyaddress"></div></p>
        </div>
    </div>

</div>

<div id="bottomEventNav">
    <div class="btnContainer">
        @if (@ViewBag.PreviousEvent != null)
        {
            <a class="button btnEvent uppercase" asp-action="details" asp-route-timelineId="@ViewBag.TimelineId" asp-route-eventId="@ViewBag.PreviousEvent.Id">
                <i class="fas fa-arrow-left xl"></i>&nbsp;&nbsp;&nbsp;@ViewBag.PreviousEvent.Title
            </a>
        }
        <a class="button btnEvent uppercase" data-id="@Model.Id" data-timeline-id="@Model.TimelineId" href="#" id="deleteEvent">Delete</a>


        @if (@ViewBag.NextEvent != null)
        {
            <a class="button btnEvent btnRight uppercase" asp-action="details" asp-route-timelineId="@ViewBag.TimelineId" asp-route-eventId="@ViewBag.NextEvent.Id">
                @ViewBag.NextEvent.Title&nbsp;&nbsp;&nbsp;<i class="fas fa-arrow-right"></i>
            </a>
        }
        <p id="geoNonSupport" style="color:red;"></p>
    </div>
</div>

<div id="myModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@section Scripts{

    <script>
    function initAutocomplete() {
        var loc = "@Model.Location";
        var lat = "55.873543";
        var lng = "-4.289058";

        var latlng = new google.maps.LatLng(lat, lng);
        var mapOptions = {
            zoom: 15,
            center: latlng,
            mapTypeId: 'roadmap'
        }

        var map = new google.maps.Map(document.getElementById("googleMap"), mapOptions);
        var marker = null;
    
        if (loc == "0,0") {
            var options = { enableHighAccuracy: true, };
            if (navigator.geolocation) {
                function error(err) {
                    document.getElementById("geoNonSupport").innerHTML = "Geolocation is not supported by this browser."
                    console.warn(`ERROR(${err.code}): ${err.message}`);
                }

                function showPosition(position) {
                    lat = String(position.coords.latitude.toFixed(6));
                    lng = String(position.coords.longitude.toFixed(6));
                    loc = lat.concat(",", lng);
                    document.getElementById("curlat").setAttribute("value", lat);
                    document.getElementById("curlng").setAttribute("value", lng);
                    document.forms['edit-location-form']['locationaddress'].value = loc;

                    // Set marker location to current position
                    if (marker != null) {
                        var latLng = new google.maps.LatLng(lat, lng);
                        marker.setPosition(latLng);
                        map.panTo(latLng);
                    }
                }

                navigator.geolocation.getCurrentPosition(showPosition, error, options);
            }
        }
        else if (@Model.Location != null) {
            lat = "@Model.Location.Split(",")[0]";
            lng = "@Model.Location.Split(",")[1]";
            loc = lat.concat(",", lng);
            document.getElementById("curlat").setAttribute("value", "@Model.Location.Split(",")[0]");
            document.getElementById("curlng").setAttribute("value", "@Model.Location.Split(",")[1]");
            document.forms['edit-location-form']['locationaddress'].value = loc;
        }

        //debugger;
        var card = document.getElementById('pac-card');
        var input = document.getElementById('pac-input');
        //var types = document.getElementById('type-selector');
        var strictBounds = document.getElementById('strict-bounds-selector');

        map.controls[google.maps.ControlPosition.TOP_RIGHT].push(card);

        var autocomplete = new google.maps.places.Autocomplete(input);

        // Bind the map's bounds (viewport) property to the autocomplete object,
        // so that the autocomplete requests use the current map bounds for the
        // bounds option in the request.
        autocomplete.bindTo('bounds', map);

        var infowindow = new google.maps.InfoWindow();
        var infowindowContent = document.getElementById('infowindow-content');
        infowindow.setContent(infowindowContent);
        marker = new google.maps.Marker({
            position: latlng,
            title: 'Set lat/lon values for this property',
            anchorPoint: new google.maps.Point(0, -29),
            map: map,
            draggable: true
        });
        marker.setMap(map);

        autocomplete.addListener('place_changed', function () {
            infowindow.close();
            marker.setVisible(false);
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                // User entered the name of a Place that was not suggested and
                // pressed the Enter key, or the Place Details request failed.
                window.alert("No details available for input: '" + place.name + "'");
                return;
            }

            // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);
            var dglat = document.getElementById("curlat").value = String(place.geometry.location.getPosition().lat());
            var dglng = document.getElementById("curlng").value = String(place.geometry.location.getPosition().lng());
            var dgloc = dglat.concat(",", dglng);
            document.forms['edit-location-form']['locationaddress'].value = dgloc;

            var address = '';
            if (place.address_components) {
                address = [
                    (place.address_components[0] && place.address_components[0].short_name || ''),
                    (place.address_components[1] && place.address_components[1].short_name || ''),
                    (place.address_components[2] && place.address_components[2].short_name || '')
                ].join(' ');
            }

            infowindowContent.children['place-icon'].src = place.icon;
            infowindowContent.children['place-name'].textContent = place.name;
            infowindowContent.children['place-address'].textContent = address;
            infowindow.open(map, marker);
        });

        google.maps.event.addListener(marker, 'drag', function (event) {
            var dglat = document.getElementById("curlat").value = String(this.getPosition().lat());
            var dglng = document.getElementById("curlng").value = String(this.getPosition().lng());
            var dgloc = dglat.concat(",", dglng);
            document.forms['edit-location-form']['locationaddress'].value = dgloc;
        });
    }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCfblapLmgaCE0GVpChYqSoGMJ8ik09IZA&libraries=places&callback=initAutocomplete"></script>


    <script>

    $('#edit-location-form').on('submit', function (e) {
        e.preventDefault();

        var data = $('#edit-location-form').serialize();
        disableFormElement($('#btnSave'), true);
        $.post("/Timelines/" + "@ViewBag.TimelineId" + "/Events/" + "@ViewBag.EventId" +"/EditEventLocation", data, function (response) {
        // If edit was successful post returns with OK
        if (response.startsWith('OK')) {
            location.href = "/Timelines/" + "@ViewBag.TimelineId" + "/Events/" + "@ViewBag.EventId"; // Redirect here instead of on server-side

            // Hack to make flash message appear correctly when side bar is shown.
             $('.flash-messages').css('margin-left', '20px');
        }
        else {
            // Otherwise redisplay form.
            location.href = "/Timelines/" + "@ViewBag.TimelineId" + "/Events/" + "@ViewBag.EventId";
        }
    }, 'html');

    });
    </script>
    <script>
        function goBack() {
            window.history.back();
        }

        function openTab(evt, tabName) {
            var i, tabcontent, tablinks;
            tabcontent = document.getElementsByClassName("tabcontent");
            for (i = 0; i < tabcontent.length; i++) {
                tabcontent[i].style.display = "none";
            }
            tablinks = document.getElementsByClassName("tablinks");
            for (i = 0; i < tablinks.length; i++) {
                tablinks[i].className = tablinks[i].className.replace(" active", "");
            }
            document.getElementById(tabName).style.display = "block";
            evt.currentTarget.className += " active";
        }
    </script>


    <!-- Image Gallery Scripts -->
    <script>
        var slideIndex = 1;
        showSlides(slideIndex);

        function plusSlides(n) {
            showSlides(slideIndex += n);
        }

        function currentSlide(n) {
            showSlides(slideIndex = n);
        }

        function showSlides(n) {
            var i;
            var slides = document.getElementsByClassName("mySlides");
            var dots = document.getElementsByClassName("dot");
            if (n > slides.length) { slideIndex = 1 }
            if (n < 1) { slideIndex = slides.length }
            for (i = 0; i < slides.length; i++) {
                slides[i].style.display = "none";
            }
            for (i = 0; i < dots.length; i++) {
                dots[i].className = dots[i].className.replace(" active", "");
            }
            slides[slideIndex - 1].style.display = "block";
            dots[slideIndex - 1].className += " active";
        }
    </script>


    <script>
        function handleEditDescriptionCancel(id) {
            $('#cancelEditDescriptionBtn').click(function (evt) {
                $.get('/TimelineEvents/Description/' + id, function (data) {
                    $('#descriptionContent').html(data);
                    handleEditDescription();
                });
            });
        }

        function handleEditDescription() {
            $('#editDescriptionLink').click(function (evt) {
                evt.preventDefault();

                var id = $('#editDescriptionLink').attr('data-id');
                $.get('/TimelineEvents/DescriptionEdit/' + id, function (data) {
                    $('#descriptionContent').html(data);

                    $('#edit-description').focus();

                    $('#editDescriptionForm').on('submit', function (evt) {
                        evt.preventDefault();
                        disableFormElement('#editDescriptionBtn', true);

                        var data = $('#editDescriptionForm').serialize();
                        $.post('/TimelineEvents/DescriptionEditPost/' + id, data, function (data) {
                            $('#descriptionContent').html(data);
                            handleEditDescriptionCancel(id);
                            handleEditDescription();
                        });
                    });

                    handleEditDescriptionCancel(id);

                });
            });
        }

        function showDeleteModal(linkElement) {
            var id = linkElement.attr('data-id');
            $.ajax({
                url: '/attachments/@ViewBag.EventId/delete/' + id,
                dataType: 'html',
                method: 'GET',
                success: function (data, status, xhr) {
                    $('#myModalContent').html(data);
                    $('#myModal').modal({ keyboard: true });
                    $('#myModal').modal('show');

                    $('#delete-attachment-form').on('submit', function (evt) {
                        evt.preventDefault();

                        $.ajax({
                            url: '/attachments/@ViewBag.EventId/delete/' + id,
                            dataType: 'html',
                            method: 'POST',
                            data: $(this).serialize(),
                            success: function (response, status, xhr) {
                                $('#myModal').modal('hide');

                                if (response.startsWith('OK')) {
                                    // Remove item from table.
                                    var attachmentId = response.split(' ')[1];
                                    $('#attachment-item-' + attachmentId).remove();

                                    loadFlashPartial();
                                }
                            }
                        });
                    });
                }
            });
        }

        $(function () {
            handleEditDescription();

            $('#deleteEvent').click(function (evt) {
                evt.preventDefault();

                handleDelete();
            });

            $('.deleteAttachmentLink').click(function (evt) {
                evt.preventDefault();

                showDeleteModal($(this));
            });

            // Check if API is offline.
            checkApiOffline(function () {
                // Code inside this function gets executing if API is offline
                $('.modal-link-create-timeline').attr('disabled', 'disabled');
            });
        });
    </script>
}